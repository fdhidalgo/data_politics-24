{
  "hash": "4e6271b6ee73b731b20264243fb81746",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Linear Regression\"\nsubtitle: \"Lecture 12\"\ndate: last-modified\nauthor: \n  - name: F. Daniel Hidalgo\n    email: dhidalgo@mit.edu\n    affiliations: MIT\nformat: \n  clean-revealjs:\n    incremental: false\nengine: knitr\nexecute: \n  cache: true\nwebr:\n  packages: ['tidyverse'] # Install R packages on document open\n  show-startup-message: false\nfilters: \n  - timer\n  - webr\nbibliography: ../data_politics_2024.bib\neditor:\n  render-on-save: true\n---\n\n::: {.cell}\n\n:::\n\n\n## Misinformation and Covid-19\n\n- @arecharUnderstandingCombattingMisinformation2023 study misinformation about Covid-19 in 16 countries, with a sample 34K respondents. \n\n- Ask respondents to rate whether 20 headlines are true or false.\n  - Also test interventions designed to increase discernment of misinformation:\n    - **Accuracy**: Just ask respondents to rate headlines on accuracy\n    - **Sharing**: Ask respondents whether they would share the headline on social media\n    - **Prompt**: Ask respondents to rate 1 headline on accuracy before asking about sharing\n    - **Tips**: Minimial digital literacy intervention, i.e. prompt respondents to think about accuracy before sharing (used by Facebook)\n\n## Dicernment Across Countries\n\n![](images/discernment.png)\n\n# Prediction\n\n## Discerning Misinformation\n\n::: {.cell}\n\n:::\n\n\n We use the dataset from @arecharUnderstandingCombattingMisinformation2023, which contains information on how people rate the credibility of headlines: \n\n| Variable    | Description                                                     |\n|-------------|-----------------------------------------------------------------|\n| `discernment` | Standardized difference between the mean rating of true and false headlines |\n| `country`    | Country                                                         |\n| `age`        | Age                                                             |\n| `gender`     | Gender                                                          |\n| `demo_impt`  | How important is it for you to live in a country that is governed democratically?|                                      |\n\n## Bivariate Prediction\n\n- [**Goal**]{.alert}: What's our best guess for a respondent's misinformation discernment given their age? \n\n. . .\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmisinfo_age_plot <- \n  filter(discernment, country == \"us\") |>\n        ggplot(aes(\n                x = age,\n                y = discernment\n        )) +\n        geom_point() +\n        labs(\n                x = \"Age\",\n                y = \"Misinformation Discernment\"\n        )\nmisinfo_age_plot\n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/bivariate-1.png){width=960}\n:::\n:::\n\n\n## Bivariate Prediction\n\n- For a given value of *X*, what's the best guess for *Y*?\n  - We need a function that maps values of *X* predictions about *Y*.\n  \n- [**Example**]{.alert}: what is the level of misinformation discernment for a 22-year-old?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmisinfo_age22 <- filter(discernment, country == \"us\") |>\n  summarise(mean(discernment[age == 22])) |>\n  pull()\nmisinfo_age22\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6042924\n```\n\n\n:::\n:::\n\n\n## Plot the Prediction\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmisinfo_age_plot +\n  geom_point(aes(x = 22,\n                 y = misinfo_age22), \n             color = \"red\", size = 5)\n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/one_prediction_plot-1.png){width=960}\n:::\n:::\n\n## Predictions for All Ages\n\nWe can use the `stat_summary` function to plot the mean misinformation discernment for each age.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmisinfo_age_plot +\n  stat_summary(fun = mean, \n               geom = \"point\",\n               size = 5, \n               color = \"red\") \n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/all_predictions_plot-1.png){width=960}\n:::\n:::\n\n## Binned Means\n\n- While age-specific means are informative, they are pretty noisy. Is it really the case that a 22-year-old is that different from a 23-year-old?\n- We might reduce noise by binning ages and calculating the mean misinformation discernment for each bin.\n- We can use the `stat_summary_bin` function to do this.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmisinfo_age_plot +\n  stat_summary_bin(fun = mean, \n                   geom = \"point\",\n                   size = 5, \n                   color = \"red\",\n                   binwidth = 2) \n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/binned_means-1.png){width=960}\n:::\n:::\n\n\n## Bigger Bins\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmisinfo_age_plot +\n  stat_summary_bin(fun = mean, \n                   geom = \"point\",\n                   size = 5, \n                   color = \"red\",\n                   binwidth = 5) \n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/bigger_binned_means-1.png){width=960}\n:::\n:::\n\n\n# Prediction with a Linear Model\n\n## Using a line to predict\n\n- Rather than discrete bins, we can use a linear model to predict misinformation discernment from age.\n\n- Simplest possible way to relate two variables: a line\n\n$$ y = mx + b $$\n\n- [**Problem:**]{.alert} for any line we draw, not all the data is on the line. \n  - Some points will be above the line, some below. \n  - Need a way to account for **chance variation** away from the line. \n\n## Linear regression model\n\n- Model for the line of best fit: \n\n$$ Y_i = \\underbrace{\\alpha}_{\\text{intercept}} + \\underbrace{\\beta}_{\\text{slope}} \\cdot X_i + \\underbrace{\\epsilon_i}_{\\text{error term}} $$\n- [**Coefficients/parameters**]{.alert} ($\\alpha$ and $\\beta$): true unknown intercept / slope of  the line of best fit\n  - \"True\" refers to the slopes we could estimate if we the slope on the full population. \n  \n- [**Error term**]{.alert} ($\\epsilon_i$): the difference between the predicted value and the true value of $Y_i$.\n  - Chance errors are 0 on average, and uncorrelated with $X_i$.\n  \n  \n## Interpretation of the regression line\n\n$$ Y_i = \\alpha + \\beta \\cdot X_i + \\epsilon_i $$\n\n- [**Intercept**]{.alert} ($\\alpha$): the value of $Y$ when $X = 0$.\n  - Average misinformation discernment for a 0-year-old. \n- [**Slope**]{.alert} ($\\beta$): the change in $Y$ for a one-unit change in $X$.\n  - Average change in misinformation discernment for a one-year change in age.\n\n## Parameters vs Estimates\n\n- [**Parameters**]{.alert} ($\\alpha$ and $\\beta$): \n  - The  values of $\\alpha$ and $\\beta$ if we could observe all the data.\n  - Because we almost always only have a sample, we can only estimate these values.\n- [**Estimates**]{.alert} ($\\hat\\alpha$ and $\\hat{\\beta}$): \n  - The values of $\\alpha$ and $\\beta$ we calculate from the data.\n  - These estimates are our best guess at the true values of $\\alpha$ and $\\beta$.\n- [**Regression Line**]{.alert}: $\\hat{Y} = \\hat\\alpha + \\hat\\beta \\cdot X$\n  - According to the model, average value of $Y$ for a given $X$ ([**predicted value**]{.alert})\n  \n## Line of Best Fit\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmisinfo_age_plot +\n  geom_smooth(method = \"lm\", \n              se = FALSE, \n              color = \"red\",\n              size = 3)\n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/regression_line-1.png){width=960}\n:::\n:::\n\n\n## Why not this line? \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/regression_line_bad-1.png){width=960}\n:::\n:::\n\n## Prediction Error\n\n- [**Prediction Error**]{.alert}: the difference between the predicted value and the true value of $Y_i$:\n$$Y_i - (\\hat \\alpha + \\hat \\beta X_i) $$\n- We can't predict the exact value of $Y_i$ for a given $X_i$ for two reasons:\n  - The conditional average does not capture all the variation in $Y_i$.\n  - The true function is not linear.\n- In our sampled data, we call this difference the **residual**.\n\n\n\n## Least Squares\n\nHow do we get the line of best fit?\n\n- [**Least Squares**]{.alert}: the method of finding the line of best fit by minimizing the sum of the squared residuals (SSR)\n$$\\text{SSR} = \\sum_{i=1}^n (\\text{prediction error}_i)^2 = \\sum_{i=1}^n (Y_i - \\hat \\alpha - \\hat \\beta \\cdot X_i)^2 $$\n- The line of best fit is the one that minimizes the magnitude of prediction errors.\n\n# Linear Regression in R\n\n## Linear Regressionion in R\n\n- `R` will calculate the line of best fit for us using the `lm` function.\n  - Syntax is `lm(y ~ x, data = data_frame)`\n  - `y` is the outcome variable, `x` is the predictor variable.\n  - `data_frame` is the data frame containing the variables.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- lm(discernment ~ age, data = discernment)\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = discernment ~ age, data = discernment)\n\nCoefficients:\n(Intercept)          age  \n   0.530761     0.006866  \n```\n\n\n:::\n:::\n\n## Extracting Coefficients\n\nUse the `coef` function to extract the coefficients from the model object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)         age \n0.530760580 0.006866304 \n```\n\n\n:::\n:::\n\n\nA 1-unit increase in age (1 year) is associated with a .006 increase in the average level of discernment. \n\n## broom package\n\n- The `broom` package provides a suite of functions for working with model objects.\n\n- The `tidy` function extracts the coefficients from a model object in a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\ntidy(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  <chr>          <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)  0.531    0.0164        32.4 1.39e-216\n2 age          0.00687  0.000380      18.1 1.69e- 71\n```\n\n\n:::\n:::\n\n\n## More on broom\n\nThe `augment` function adds the predicted values and residuals to the original data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,359 × 8\n   discernment   age .fitted .resid     .hat .sigma    .cooksd .std.resid\n         <dbl> <dbl>   <dbl>  <dbl>    <dbl>  <dbl>      <dbl>      <dbl>\n 1       1.13     69   1.00   0.130 0.000512  0.556 0.0000139       0.233\n 2       1.43     68   0.998  0.433 0.000485  0.556 0.000147        0.778\n 3       1.26     25   0.702  0.561 0.000225  0.556 0.000115        1.01 \n 4       1.30     78   1.07   0.234 0.000793  0.556 0.0000700       0.420\n 5       1.74     55   0.908  0.835 0.000224  0.556 0.000253        1.50 \n 6       1.32     59   0.936  0.380 0.000288  0.556 0.0000672       0.683\n 7       1.66     80   1.08   0.585 0.000866  0.556 0.000479        1.05 \n 8       1.73     69   1.00   0.721 0.000512  0.556 0.000430        1.30 \n 9      -0.487    26   0.709 -1.20  0.000212  0.556 0.000490       -2.15 \n10       0.933    40   0.805  0.127 0.000120  0.556 0.00000314      0.229\n# ℹ 8,349 more rows\n```\n\n\n:::\n:::\n\n\n## Plotting the Residuals\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\naugment_out <- augment(fit)\n\nggplot(augment_out, aes(x = age, y = .resid)) +\n  geom_point() +\n  labs(title = \"Residuals Plot\",\n       x = \"Age\",\n       y = \"Residuals\") +\n  geom_smooth(method = \"lm\", \n              se = FALSE, \n              color = \"red\",\n              size = 3)\n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/residuals_plot-1.png){width=960}\n:::\n:::\n\n\n\n## Prediction with the Model\n\n- We can use the `predict` function to get the predicted values from the model.\n- The `newdata` argument is a data frame with the values of the predictor variable(s) we want to predict for.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(fit, newdata = data.frame(age = c(20, 70)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        1         2 \n0.6680867 1.0114019 \n```\n\n\n:::\n:::\n\n\n## Back to the Binned Means\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmisinfo_age_plot +\n  stat_summary(fun = mean, \n               geom = \"point\",\n               size = 5, \n               color = \"red\") + \n  geom_smooth(method = \"lm\",\n              se = FALSE,\n              color = \"red\",\n              size = 3)\n```\n\n::: {.cell-output-display}\n![](linear_model_files/figure-revealjs/binned_means_lm-1.png){width=960}\n:::\n:::\n\n\n\n\n## References",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}