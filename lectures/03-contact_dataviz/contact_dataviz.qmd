---
title: "Contact Theory and Data Visualization in `R`"
subtitle: "Lecture 3"
date: last-modified
author: 
  - name: F. Daniel Hidalgo
    email: dhidalgo@mit.edu
    affiliations: MIT
format: clean-revealjs
bibliography: ../data_politics_2024.bib
editor:
  render-on-save: true
---

# `ggplot2`

## ggplot2 $\in$ tidyverse

::: columns
::: {.column width="50%"}
![](images/ggplot2-part-of-tidyverse.png)
:::

::: {.column width="50%"}

- **ggplot2** is tidyverse's data visualization package 
- Structure of the code for plots can be summarized as

````r
ggplot(data = [dataset], 
       mapping = aes(x = [x-variable], 
                     y = [y-variable])) +
   geom_xxx() +
   other options
````
:::
:::

## Midwest data

```{r}
#| echo: true

library(ggplot2)
midwest

```

## Building up a graph in pieces

Create ggplot object and direct it to the correct data:

```{r}
#| echo: true
p <- ggplot(data = midwest)
```

**Mapping**: tell ggplot what visual aesthetics correspond to which variables

```{r}
#| echo: true
p <- ggplot(data = midwest,
            mapping = aes(x = popdensity,
                          y = percbelowpoverty))
```

Other aesthetic mappings: color, shape, size, etc.

## Adding a geom layer

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6
ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty)) + 
  geom_point()
```

## Trying a new geom

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty)) + 
  geom_smooth()

```

## Layering geoms is additive

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6


ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty)) + 
  geom_point() + 
  geom_smooth() +
  scale_x_log10()
```

## Geoms are functions

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE) +
  scale_x_log10()
```

## Adding Informative Labels

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

p2 <- ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty)) + 
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  scale_x_log10() +
  labs(
    x = "Population Density",
    y = "Percent of County Below Poverty Line", 
    title = "Poverty and Population Density",
    subtitle = "Among US Midwestern Counties", 
    caption = "US Census, 2000"
  )
p2
```

## Mapping vs setting aesthetics

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty,
                    color = "purple")) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE) +
  scale_x_log10()
```

## Mapping always refers to variables

If passed a value other than a variable name, ggplot will implicitly create a variable with that value (in this case "purple" that is constant)

```{r}
#| echo: true
#| eval: false

ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty,
                    color = "purple")) + 
  geom_point() + 
  geom_smooth() +
  scale_x_log10()
```

. . .

Set the color outside the `mapping = aes()` format.

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest, 
      mapping = aes(x = popdensity, y = percbelowpoverty)) + 
  geom_point(color = "purple") + 
  geom_smooth() +
  scale_x_log10()
```

## Mapping more aesthetics

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest, 
      mapping = aes(x = popdensity, 
                    y = percbelowpoverty,
                    color = state, 
                    fill= state)) + 
  geom_point() + 
  geom_smooth() +
  scale_x_log10()
```

## Mappings can be done on a per geom basis

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest, 
      mapping = aes(x = popdensity, 
                    y = percbelowpoverty)) + 
  geom_point(mapping = aes(color = state)) + 
  geom_smooth(color = "black") +
  scale_x_log10()
```

# Histograms and Boxplots

## Histograms

**Histograms** show where there are more or fewer observations of a numeric variable.

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest,
       mapping = aes(x = percbelowpoverty)) +
  geom_histogram()
```

Split up range of variable into bins, count how many are in each bin.

y aesthetic calculated automatically.

## Creating small multiples with facets

**Small multiples**: a series of similar graphs with the same scale/axes to help with comparing different partitions of a dataset.

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest,
       mapping = aes(x = percbelowpoverty)) +
  geom_histogram() +
  facet_wrap(~ state)
```

We’ll see more of the `~` variable syntax (called a formula).

## Density as alternative to histograms

A kernel density plot is a smoothed version of a histogram and slightly easier to overlay.

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest,
       mapping = aes(x = percbelowpoverty,
                     fill = state, color = state)) +
  geom_density(alpha = .3)
```

## Boxplots

Boxplots are another way to compare distributions across discrete groups.

```{r}
#| echo: true
#| output-location: slide
#| fig.width: 6

ggplot(data = midwest,
       mapping = aes(x = state,
                     y = percbelowpoverty)) +
  geom_boxplot()
```

## Boxplots in `R`

::: {.incremental}

- “Box” represents middle 50% of the data.
  - 25% of the data is below the bottom of the box, 25% is above
  - Height of the box is the interquartile range (IQR)
- Horizontal line in the box is the median
  - 50% of the data is below the median, 50% is above
- "Whiskers" represent either:
  - 1.5 $\times$ IQR or max/min of the data, whichever is smaller
  - Points beyond the whiskers are considered outliers
:::